package com.frxs.wmsrecpt.fragment;

import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.text.TextUtils;
import android.util.Base64;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import com.frxs.common_base.utils.CommonUtils;
import com.frxs.common_base.utils.DateUtil;
import com.frxs.common_base.utils.LogUtils;
import com.frxs.common_base.utils.MathUtils;
import com.frxs.common_base.utils.SharedPreferencesHelper;
import com.frxs.common_base.utils.SystemUtils;
import com.frxs.common_base.utils.ToastUtils;
import com.frxs.common_base.widget.EmptyView;
import com.frxs.wmsrecpt.R;
import com.frxs.wmsrecpt.activity.MyBaseActivity;
import com.frxs.wmsrecpt.activity.ReceivedOrderDetalisActivity;
import com.frxs.wmsrecpt.activity.SearchBluetoothActivity;
import com.frxs.wmsrecpt.bluetooth.BluetoothService;
import com.frxs.wmsrecpt.bluetooth.OnBluetoothLisenter;
import com.frxs.wmsrecpt.bluetooth.PrintHelper;
import com.frxs.wmsrecpt.comms.Config;
import com.frxs.wmsrecpt.comms.GlobelDefines;
import com.frxs.wmsrecpt.model.OrderSectionListItem;
import com.frxs.wmsrecpt.model.ReceivedOrder;
import com.frxs.wmsrecpt.model.ReceivedOrderDetalise;
import com.frxs.wmsrecpt.model.SectionListItem;
import com.frxs.wmsrecpt.rest.model.ApiRequest;
import com.frxs.wmsrecpt.rest.model.ApiResponse;
import com.frxs.wmsrecpt.rest.service.RequestListener;
import com.frxs.wmsrecpt.rest.service.SimpleCallback;
import com.frxs.wmsrecpt.utils.BytesUtil;
import com.gprinter.aidl.GpService;
import com.gprinter.command.EscCommand;
import com.gprinter.command.GpCom;
import com.gprinter.command.GpUtils;
import com.gprinter.io.GpDevice;
import com.gprinter.io.PortParameters;
import com.gprinter.service.GpPrintService;
import com.pacific.adapter.Adapter;
import com.pacific.adapter.AdapterHelper;
import com.sunmi.peripheral.printer.InnerPrinterCallback;
import com.sunmi.peripheral.printer.InnerPrinterException;
import com.sunmi.peripheral.printer.InnerPrinterManager;
import com.sunmi.peripheral.printer.InnerResultCallbcak;
import com.sunmi.peripheral.printer.SunmiPrinterService;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import butterknife.Unbinder;
import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.schedulers.Schedulers;
import retrofit2.Call;

/**
 * <pre>
 *     author : ewu
 *     e-mail : xxx@xx
 *     time   : 2018/10/31
 *     desc   : xxxx描述
 *     version: 1.0
 * </pre>
 */
public class ReceivedListFragment extends MyBaseFragment {
    public static final String TAG = ReceivedListFragment.class.getSimpleName();
    @BindView(R.id.action_back_tv)
    TextView actionBackTv;
    @BindView(R.id.title_tv)
    TextView titleTv;
    @BindView(R.id.lv_order)
    ListView lvOrder;
    @BindView(R.id.empty_view)
    EmptyView emptyView;
    @BindView(R.id.action_right_tv)
    TextView actionRightTv;
    private Unbinder unbinder;
    private PrinterServiceConnection conn;
    private GpService mGpService;
    private final static int MAIN_QUERY_PRINTER_STATUS = 0xfe;
    private final static int REQUEST_PRINT_LABEL = 0xfd;
    private final static int REQUEST_PRINT_RECEIPT = 0xfc;
    private int mPrinterIndex = 0;
    private int mPrinterId = 0;
    private BluetoothService bluetoothService;
    private Adapter<OrderSectionListItem> orderAdapter;
    private String printText = "开始打印";
    private List<OrderSectionListItem> sectionList = new ArrayList<OrderSectionListItem>();

    class PrinterServiceConnection implements ServiceConnection {

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            mGpService = GpService.Stub.asInterface(service);
            connectOrDisConnectToDevice();
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            mGpService = null;
        }
    }

    private SunmiPrinterService sunmiPrinterService;
    InnerPrinterCallback innerPrinterCallback = new InnerPrinterCallback() {
        @Override
        protected void onConnected(SunmiPrinterService service) {
            sunmiPrinterService = service;
        }

        @Override
        protected void onDisconnected() {

        }
    };


    public static ReceivedListFragment newInstance(String argument) {
        Bundle bundle = new Bundle();
        bundle.putString(TAG, argument);
        ReceivedListFragment fragment = new ReceivedListFragment();
        fragment.setArguments(bundle);
        return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_received_list, container, false);
        //返回一个Unbinder值（进行解绑），注意这里的this不能使用getActivity()
        unbinder = ButterKnife.bind(this, view);
        return view;
    }

    @Override
    protected int getLayoutId() {
        return R.layout.fragment_received_list;
    }

    @Override
    protected void initView(View view) {
        actionBackTv.setVisibility(View.GONE);
        titleTv.setText(R.string.title_received_list);
        actionRightTv.setVisibility(View.VISIBLE);
        emptyView.setVisibility(View.GONE);
        initEvent();
    }

    private void initEvent() {
        // 注册实时状态查询广播
        mActivity.registerReceiver(mBroadcastReceiver, new IntentFilter(GpCom.ACTION_DEVICE_REAL_STATUS));
        mActivity.registerReceiver(mBroadcastReceiver, new IntentFilter(GpCom.ACTION_CONNECT_STATUS));
        /**
         * 票据模式下，可注册该广播，在需要打印内容的最后加入addQueryPrinterStatus()，在打印完成后会接收到
         * action为GpCom.ACTION_DEVICE_STATUS的广播，特别用于连续打印，
         * 可参照该sample中的sendReceiptWithResponse方法与广播中的处理
         **/
        mActivity.registerReceiver(mBroadcastReceiver, new IntentFilter(GpCom.ACTION_RECEIPT_RESPONSE));
        orderAdapter = new Adapter<OrderSectionListItem>(mActivity, R.layout.item_recieved_order) {
            @Override
            protected void convert(AdapterHelper helper, final OrderSectionListItem item) {
                final ReceivedOrder order = (ReceivedOrder)item.getItem();
                LinearLayout llLable = helper.getView(R.id.ll_label);
                Date beginTime = DateUtil.string2Date(order.getCreateTime(), "yyyy-MM-dd");
                String currentStr =  DateUtil.format(beginTime, "yyyy-MM-dd");
                helper.setText(R.id.tv_date, currentStr);
                helper.setText(R.id.tv_order_qty, String.format(getString(R.string.order_qty), item.getOrderCount()));
                llLable.setVisibility(item.getType() == SectionListItem.SECTION ? View.VISIBLE : View.GONE);
                helper.setText(R.id.tv_order_id, String.format(getString(R.string.order_id), order.getStockInID()));
                helper.setText(R.id.tv_vendor_name, order.getVendorCode() + "-" + order.getVendorName());
                helper.setText(R.id.tv_recieve_qty, String.format(getString(R.string.order_received_qty), MathUtils.doubleTrans(order.getStockQty())));
                if (((MyBaseActivity)mActivity).isHoneywell()) {
                    if (printText.equals("正在连接")) {
                        helper.getView(R.id.tv_print_order).setEnabled(false);
                    } else {
                        helper.getView(R.id.tv_print_order).setEnabled(true);
                    }
                    helper.setText(R.id.tv_print_order, printText);
                }
                helper.setOnClickListener(R.id.tv_print_order, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (CommonUtils.isFastDoubleClick()) {
                            return;
                        }
                        if (!((MyBaseActivity)mActivity).isHoneywell()) {
                            printReceivedOrderDetalis(order);
                        } else {
                            ifOpenBluetooth(order);
                        }
                    }
                });
                helper.setOnClickListener(R.id.start_order_details, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Bundle bundle = new Bundle();
                        bundle.putString("stock_id", order.getStockInID());
                        mActivity.gotoActivity(ReceivedOrderDetalisActivity.class, false, bundle);
                    }
                });
            }
        };
        lvOrder.setAdapter(orderAdapter);
    }

    private void printReceivedOrderDetalis(ReceivedOrder order) {
        ((MyBaseActivity)mActivity).getReceivedOrderDetalis(order.getStockInID(), new RequestListener<ReceivedOrderDetalise>() {
            @Override
            public void handleRequestResponse(ApiResponse<ReceivedOrderDetalise> result) {
                mActivity.dismissProgressDialog();
                if (result.isSuccessful() && result.getData() != null) {
                    final ReceivedOrderDetalise detalise = result.getData();
                    Observable.create(new ObservableOnSubscribe<Object>() {
                        @Override
                        public void subscribe(ObservableEmitter<Object> e) throws Exception {
                            sunmiPrint(detalise);
                        }
                    }).subscribeOn(Schedulers.io()).subscribe();
                } else {
                    if (result.isAuthenticationFailed()) {
                        ToastUtils.show(mActivity, getString(R.string.authentication_failed));
                        ((MyBaseActivity)mActivity).reLogin();
                    } else {
                        ToastUtils.show(mActivity, result.getInfo());
                    }
                }
            }

            @Override
            public void handleExceptionResponse(String errMsg) {

            }
        });
    }

    @Override
    protected void initData() {
        if (!((MyBaseActivity)mActivity).isHoneywell()) {
            try {
                InnerPrinterManager.getInstance().bindService(mActivity, innerPrinterCallback);
            } catch (InnerPrinterException e) {
                e.printStackTrace();
            }
        } else {
            conn = new PrinterServiceConnection();
            Intent intent =new  Intent(mActivity, GpPrintService.class);
            mActivity.bindService(intent, conn, Context.BIND_AUTO_CREATE);
        }

        getReceivedOrders();
        initBtPrinter();
    }

    @Override
    public void onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
        if (!hidden) {
            getReceivedOrders();
        }
    }

    private void getReceivedOrders() {
        if (!SystemUtils.checkNet(mActivity) || !SystemUtils.isNetworkAvailable(mActivity)) {
            ToastUtils.show(mActivity, "网络不可用");
            return;
        }
        mActivity.showProgressDialog();
        ApiRequest params = new ApiRequest(mActivity);
        params.put("UserID", ((MyBaseActivity)mActivity).getUserID());
        params.put("UserName", ((MyBaseActivity)mActivity).getUserName());
        params.put("WID", ((MyBaseActivity)mActivity).getWID());
        params.put("OpAreaID", ((MyBaseActivity)mActivity).getOpAreaID());
        ((MyBaseActivity)mActivity).getService().getReceivedOrders(params.getUrlParams()).enqueue(new SimpleCallback<ApiResponse<List<ReceivedOrder>>>() {
            @Override
            public void onResponse(ApiResponse<List<ReceivedOrder>> result, int code, String msg) {
                mActivity.dismissProgressDialog();
                if (result.isSuccessful() && result.getData() != null) {
                    List<ReceivedOrder> orders = result.getData();
                    if (orders.size() > 0) {
                        emptyView.setVisibility(View.GONE);
                        packageSectionList(orders);
                        orderAdapter.clear();
                        orderAdapter.addAll(sectionList);
                    } else {
                        emptyView.setVisibility(View.VISIBLE);
                        emptyView.setMode(EmptyView.MODE_NODATA);
                    }
                } else {
                    if (result.isAuthenticationFailed()) {
                        ToastUtils.show(mActivity, getString(R.string.authentication_failed));
                        ((MyBaseActivity)mActivity).reLogin();
                    } else {
                        ToastUtils.show(mActivity, result.getInfo());
                        emptyView.setVisibility(View.VISIBLE);
                        emptyView.setMode(EmptyView.MODE_ERROR);
                        emptyView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                getReceivedOrders();
                            }
                        });
                    }

                }
            }

            @Override
            public void onFailure(Call<ApiResponse<List<ReceivedOrder>>> call, Throwable t) {
                super.onFailure(call, t);
                mActivity.dismissProgressDialog();
                ToastUtils.show(mActivity, t.getMessage());
                emptyView.setVisibility(View.VISIBLE);
                emptyView.setMode(EmptyView.MODE_ERROR);
                emptyView.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        getReceivedOrders();
                    }
                });
            }
        });
    }

    private void packageSectionList(List<ReceivedOrder> itemList) {
        sectionList.clear();
        int sectionPosition = -1;

        for (int i = 0; i < itemList.size(); i++) {
            Date beginTime = DateUtil.string2Date(itemList.get(i).getCreateTime(), "yyyy-MM-dd");
            String currentStr =  DateUtil.format(beginTime, "yyyy-MM-dd");
            String previewStr = " ";
            if ((i - 1) >= 0) {
                Date date = DateUtil.string2Date(itemList.get(i - 1).getCreateTime(), "yyyy-MM-dd");
                previewStr = DateUtil.format(date, "yyyy-MM-dd");
            }
            if (!previewStr.equals(currentStr)) {
                OrderSectionListItem sectionItem = new OrderSectionListItem(itemList.get(i), SectionListItem.SECTION, itemList.get(i).getCreateTime());
                int orderCount = 1;
                sectionItem.setOrderCount(orderCount);
                sectionList.add(sectionItem);
                sectionPosition = i;
            } else {
                OrderSectionListItem listItem = new OrderSectionListItem(itemList.get(i), SectionListItem.ITEM, itemList.get(i).getCreateTime());
                if (sectionPosition >= 0) {
                    OrderSectionListItem sectionItem = sectionList.get(sectionPosition);
                    int orderCount = sectionItem.getOrderCount() + 1;
                    sectionItem.setOrderCount(orderCount);
                    sectionList.add(listItem);
                }
            }
        }
    }

    /**
     * 初始化蓝牙
     */
    private void initBtPrinter() {
        bluetoothService = PrintHelper.getBluetoothService(mActivity);
        bluetoothService.registerReceiver();
        bluetoothService.setBluetoothLisenter(new OnBluetoothLisenter() {
            @Override
            public void onBluetoothStateChanged(boolean isOpened) {
                if (isOpened) {
                    initPrintStatus();
                } else {
                    printText = "打开蓝牙";
                }
                orderAdapter.notifyDataSetChanged();
            }

            @Override
            public void onBluetoothDiscoveryFinished(List<BluetoothDevice> bondDevices, List<BluetoothDevice> unbondDevices) {

            }

            @Override
            public void onBluetoothDiscoveryFound(List<BluetoothDevice> bondDevices, List<BluetoothDevice> unbondDevices) {

            }

            @Override
            public void onBluetoothDiscoveryStarted() {

            }

            @Override
            public void onBluetoothBondStateChanged(BluetoothDevice device, boolean isSuccess) {
                printText = isSuccess ?  "开始打印" : "建立连接";
                orderAdapter.notifyDataSetChanged();
            }
        });

        if (bluetoothService.isOpen()) {
            initPrintStatus();
        } else {
            printText = "打开蓝牙";
        }
        orderAdapter.notifyDataSetChanged();
    }

    /**
     * 初始化打印状态
     */
    private void initPrintStatus() {
        int status = 0;
        try {
            if (!((MyBaseActivity)mActivity).isHoneywell()) {
                if (sunmiPrinterService != null) {
                    status = sunmiPrinterService.updatePrinterState();
                }
            } else {
                if (mGpService != null) {
                    status = mGpService.getPrinterConnectStatus(mPrinterId);
                }
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        switch (status){
            case GpDevice.STATE_NONE:
                printText = "建立连接";
                break;
            case GpDevice.STATE_CONNECTED:
                printText = "开始打印";
                break;
                default:
                    break;
        }
    }

    /**
     * 连接或断开设备连接
     */
    private void connectOrDisConnectToDevice() {
        int rel = 0;
        String macAddress = SharedPreferencesHelper.getInstance(mActivity, GlobelDefines.PREFS_NAME).getString(Config.KEY_BT_MAC, "");
        if (!TextUtils.isEmpty(macAddress)) {
            try {
                rel = mGpService.openPort(mPrinterId, PortParameters.BLUETOOTH, macAddress, 0);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            GpCom.ERROR_CODE r = GpCom.ERROR_CODE.values()[rel];
            if (r != GpCom.ERROR_CODE.SUCCESS) {
                if (r != GpCom.ERROR_CODE.DEVICE_ALREADY_OPEN) {
                    ToastUtils.show(mActivity,GpCom.getErrorText(r));
                }
            }
        } else {
            LogUtils.d("DisconnectToDevice");
        }
    }


    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (action == GpCom.ACTION_DEVICE_REAL_STATUS) {
                int requestCode = intent.getIntExtra(GpCom.EXTRA_PRINTER_REQUEST_CODE, -1);
                if (requestCode == MAIN_QUERY_PRINTER_STATUS) {
                    int status = intent.getIntExtra(GpCom.EXTRA_PRINTER_REAL_STATUS, 16);
                    String str = "";
                    if (status == GpCom.STATE_NO_ERR) {
                        str = "打印机正常";
                    } else {
                        str = "打印机";
                        if ((status & GpCom.STATE_OFFLINE) > 0) {
                            str += "脱机";
                        }
                        if ((status & GpCom.STATE_PAPER_ERR) > 0) {
                            str += "缺纸";
                        }
                        if ((status & GpCom.STATE_COVER_OPEN) > 0) {
                            str += "打印机开盖";
                        }
                        if ((status & GpCom.STATE_ERR_OCCURS) > 0) {
                            str += "打印机出错";
                        }
                        if ((status & GpCom.STATE_TIMES_OUT) > 0) {
                            str += "查询超时";
                        }
                    }

                    ToastUtils.show(mActivity, "打印机：" + mPrinterIndex +  " 状态：" + str);
                } else if (requestCode == REQUEST_PRINT_LABEL) {
                    int status = intent.getIntExtra(GpCom.EXTRA_PRINTER_REAL_STATUS, 16);
                    if (status != GpCom.STATE_NO_ERR) {
                        ToastUtils.show(mActivity, "query printer status error");
                    }
                } else if (requestCode == REQUEST_PRINT_RECEIPT) {
                    int status = intent.getIntExtra(GpCom.EXTRA_PRINTER_REAL_STATUS, 16);
                    if (status != GpCom.STATE_NO_ERR) {
                        ToastUtils.show(mActivity, "query printer status error");
                    }
                }
            } else if (action == GpCom.ACTION_CONNECT_STATUS) {
                int type = intent.getIntExtra(GpPrintService.CONNECT_STATUS, 0);
                if (type == GpDevice.STATE_CONNECTED) {
                    printText = "开始打印";
                } else if (type == GpDevice.STATE_CONNECTING) {
                    printText = "正在连接";
                } else if (type == GpDevice.STATE_NONE) {
                    printText = "建立连接";
                } else if (type == GpDevice.STATE_INVALID_PRINTER) {
                    printText = "建立连接";
                }
            } else if (action == GpCom.ACTION_LABEL_RESPONSE) {

            }
            orderAdapter.notifyDataSetChanged();
        }
    };


    /**
     * 判断蓝牙是否开启
     */
    private void ifOpenBluetooth(ReceivedOrder item){
        if (bluetoothService.isOpen()) {
            String macAddress = SharedPreferencesHelper.getInstance(mActivity, GlobelDefines.PREFS_NAME).getString(Config.KEY_BT_MAC, "");
            if (bluetoothService.checkBluetoothAddress(macAddress)) {
                BluetoothDevice btDevice = bluetoothService.getRemoteDevice(macAddress);
                if (btDevice.getBondState() == BluetoothDevice.BOND_NONE) {
                    try {
                        Method createBondMethod = BluetoothDevice.class.getMethod("createBond");
                        createBondMethod.invoke(btDevice);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (btDevice.getBondState() == BluetoothDevice.BOND_BONDED) {
                    if (!((MyBaseActivity)mActivity).isHoneywell()) {
                        printReceivedOrderDetalis(item);
                    } else {
                        checkStatusAndPrint(item);
                    }
                }
            } else {
                ToastUtils.show(mActivity, "无效的蓝牙MAC地址，请重新配置");
                Intent intent = new Intent(mActivity, SearchBluetoothActivity.class);
                startActivity(intent);
            }
        } else {
            ToastUtils.show(mActivity, "蓝牙未打开");
            bluetoothService.openBluetooth(mActivity);
        }
    }

    private void checkStatusAndPrint(ReceivedOrder item) {
        int status = 0;
        try {
            status = mGpService.getPrinterConnectStatus(mPrinterId);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        switch (status) {
            case GpDevice.STATE_NONE:
                connectOrDisConnectToDevice();
                break;
            case GpDevice.STATE_CONNECTED:
                if (printText.equals("建立连接")) {
                    printText = "开始打印";
                    orderAdapter.notifyDataSetChanged();
                    return;
                }
                ((MyBaseActivity) mActivity).getReceivedOrderDetalis(item.getStockInID(), new RequestListener<ReceivedOrderDetalise>() {
                    @Override
                    public void handleRequestResponse(ApiResponse<ReceivedOrderDetalise> result) {
                        mActivity.dismissProgressDialog();
                        if (result.isSuccessful() && result.getData() != null) {
                            final ReceivedOrderDetalise detalise = result.getData();
                            Observable.create(new ObservableOnSubscribe<Object>() {
                                @Override
                                public void subscribe(ObservableEmitter<Object> e) throws Exception {
                                    sendPrinting(detalise);
                                }
                            }).subscribeOn(Schedulers.io()).subscribe();
                        } else {
                            if (result.isAuthenticationFailed()) {
                                ToastUtils.show(mActivity, getString(R.string.authentication_failed));
                                ((MyBaseActivity) mActivity).reLogin();
                            } else {
                                ToastUtils.show(mActivity, result.getInfo());
                            }
                        }
                    }

                    @Override
                    public void handleExceptionResponse(String errMsg) {

                    }
                });


                break;
            default:
                break;
        }
    }

    InnerResultCallbcak innerResultCallbcak = new InnerResultCallbcak() {
        @Override
        public void onRunResult(boolean isSuccess) throws RemoteException {
            ToastUtils.show(mActivity, "商米打印测试 onRunResult " + isSuccess);
        }

        @Override
        public void onReturnString(String result) throws RemoteException {
            ToastUtils.show(mActivity, "商米打印测试 onReturnString" + result);
        }

        @Override
        public void onRaiseException(int code, String msg) throws RemoteException {
            ToastUtils.show(mActivity, "商米打印测试onRaiseException " + code + msg);
        }

        @Override
        public void onPrintResult(int code, String msg) throws RemoteException {
            ToastUtils.show(mActivity, "商米打印测试 onPrintResult" + code + msg);
        }
    };

    private void sunmiPrint(ReceivedOrderDetalise item) {
        if (null == item) {
            ToastUtils.show(mActivity, "收货订单数据为空，打印失败");
            return;
        }
        try {
            sunmiPrinterService.printerInit(innerResultCallbcak);
            sunmiPrinterService.setFontSize(36, innerResultCallbcak);
            sunmiPrinterService.setAlignment(1, innerResultCallbcak);
            sunmiPrinterService.printText("代购入库单\n\n", innerResultCallbcak);

            sunmiPrinterService.printerInit(innerResultCallbcak);
            sunmiPrinterService.sendRAWData(new byte[]{0x1B,0x33, 0x27}, null);
            sunmiPrinterService.printText(getString(R.string.stock_in_id, item.getStockInID()), innerResultCallbcak);
            sunmiPrinterService.lineWrap(1, null);
            sunmiPrinterService.printText(getString(R.string.warehouse, item.getWName()), innerResultCallbcak);
            sunmiPrinterService.lineWrap(1, null);
            sunmiPrinterService.printText(getString(R.string.suppler, item.getVendorName()), null);
            sunmiPrinterService.lineWrap(1, null);
            sunmiPrinterService.printText(getString(R.string.receiving_date, DateUtil.format(new Date(), "yyy-MM-dd")), null);
            sunmiPrinterService.lineWrap(1, null);
            sunmiPrinterService.printText(getString(R.string.receiving_clerk, ((MyBaseActivity)mActivity).getUserName()), null);
            sunmiPrinterService.lineWrap(1, null);

            sunmiPrinterService.sendRAWData(BytesUtil.dividerLine(), null);
            int totalCount = 0;
            sunmiPrinterService.printColumnsString(new String[]{getString(R.string.product), getString(R.string.product_num), getString(R.string.product_unit)}, new int[]{2,1,1}, new int[]{0,1,1}, null);
            for (ReceivedOrderDetalise.ItemsBean product :item.getItems()) {
                sunmiPrinterService.printText(product.getProductName() + "\n", null);
                sunmiPrinterService.printColumnsString(new String[]{product.getSKU(), String.valueOf(product.getQty()), product.getUnit()}, new int[]{2,1,1}, new int[]{0,1,1}, null);
                totalCount += product.getQty();
            }
            sunmiPrinterService.sendRAWData(BytesUtil.dividerLine(), null);

            sunmiPrinterService.sendRAWData(new byte[]{0x1B,0x45,0x01}, null);
            String productTypeNum = getString(R.string.product_type_num, ((item.getItems() != null &&  item.getItems().size() > 0) ? item.getItems().size() : 0));
            String amount = getString(R.string.amount, String.valueOf(totalCount));
            sunmiPrinterService.printColumnsString(new String[]{productTypeNum, amount}, new int[]{1,1}, new int[]{0,0}, null);
            sunmiPrinterService.sendRAWData(new byte[]{0x1B, 0x45, 0x0}, null);
            sunmiPrinterService.lineWrap(1, null);
            sunmiPrinterService.printText(getString(R.string.receiver, ((MyBaseActivity)mActivity).getUserName()), null);
            sunmiPrinterService.lineWrap(1, null);
            sunmiPrinterService.printText(getString(R.string.leader_sign), null);

            sunmiPrinterService.lineWrap(5, null);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    /**
     * 发送打印
     */
    private void sendPrinting(ReceivedOrderDetalise item) {
        EscCommand esc = new EscCommand();
        esc.addInitializePrinter();
        esc.addTurnUpsideDownModeOnOrOff(EscCommand.ENABLE.OFF);
        esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印左对齐
        esc.addSetLineSpacing((byte)100);

        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_2, EscCommand.HEIGHT_ZOOM.MUL_2);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.CENTER);// 设置打印居左
        esc.addText("代购入库单\n\n");
        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印居左
        esc.addText("单号：" + item.getStockInID());
        esc.addSetHorAndVerMotionUnits((byte) 7, (byte) 0);
        esc.addSetAbsolutePrintPosition((short) 12);
        esc.addText("仓库：" + item.getWName());
        esc.addPrintAndLineFeed();

        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印居左
        esc.addText("供应商：" + item.getVendorName());
        esc.addPrintAndLineFeed();

        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印居左
        esc.addText("制单日期：" +  DateUtil.format(new Date(), "yyy-MM-dd"));
        esc.addSetHorAndVerMotionUnits((byte) 7, (byte) 0);
        esc.addSetAbsolutePrintPosition((short) 12);
        esc.addText("制单人：" + ((MyBaseActivity)mActivity).getUserName());
        esc.addPrintAndLineFeed();

        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.CENTER);// 设置打印居左
        esc.addText("-----------------------------------------------");
        esc.addPrintAndLineFeed();

        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印居左
        esc.addText("商品");
        esc.addSetHorAndVerMotionUnits((byte) 7, (byte) 0);
        esc.addSetAbsolutePrintPosition((short) 12);
        esc.addText("数量");
        esc.addSetAbsolutePrintPosition((short) 17);
        esc.addText("单位");
        esc.addPrintAndLineFeed();

        int totalCount = 0;
        if ( item.getItems() != null &&  item.getItems().size() > 0) {
            for (ReceivedOrderDetalise.ItemsBean product : item.getItems()) {
                esc.addSetLineSpacing((byte) 80);
                esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
                esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印居左
                esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
                esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印居左
                esc.addText(product.getProductName());
                esc.addPrintAndLineFeed();
                esc.addSetLineSpacing((byte) 120);
                esc.addText(product.getSKU());
                esc.addSetHorAndVerMotionUnits((byte) 7, (byte) 0);
                esc.addSetAbsolutePrintPosition((short) 12);
                esc.addText(String.valueOf(product.getQty()));
                esc.addSetAbsolutePrintPosition((short) 17);
                esc.addText(product.getUnit());
                esc.addPrintAndLineFeed();
                totalCount += product.getQty();
            }
        }

        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.CENTER);// 设置打印居左
        esc.addText("-----------------------------------------------");
        esc.addPrintAndLineFeed();

        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印居左
        esc.addTurnEmphasizedModeOnOrOff(EscCommand.ENABLE.ON);
        esc.addText("品项：" + (( item.getItems() != null &&  item.getItems().size() > 0) ? item.getItems().size() : 0));
        esc.addSetHorAndVerMotionUnits((byte) 7, (byte) 0);
        esc.addSetAbsolutePrintPosition((short)9);
        esc.addText("合计：");
        esc.addSetAbsolutePrintPosition((short) 12);
        esc.addText(String.valueOf(totalCount));
        esc.addPrintAndFeedLines((byte)2);

        esc.addSetCharcterSize(EscCommand.WIDTH_ZOOM.MUL_1, EscCommand.HEIGHT_ZOOM.MUL_1);// 设置1号字
        esc.addSelectJustification(EscCommand.JUSTIFICATION.LEFT);// 设置打印居左
        esc.addTurnEmphasizedModeOnOrOff(EscCommand.ENABLE.OFF);
        esc.addText("收货员：" + ((MyBaseActivity)mActivity).getUserName());
        esc.addSetHorAndVerMotionUnits((byte) 7, (byte) 0);
        esc.addSetAbsolutePrintPosition((short) 12);
        esc.addText("组长签字：");
        esc.addPrintAndFeedLines((byte)5);

        // 加入查询打印机状态，打印完成后，此时会接收到GpCom.ACTION_DEVICE_STATUS广播
        esc.addQueryPrinterStatus();

        Vector<Byte> datas = esc.getCommand(); // 发送数据
        byte[] bytes = GpUtils.ByteTo_byte(datas);
        String sss = Base64.encodeToString(bytes, Base64.DEFAULT);
        int rs;
        try {
            rs = mGpService.sendEscCommand(mPrinterIndex, sss);
            final GpCom.ERROR_CODE r = GpCom.ERROR_CODE.values()[rs];
            if (r != GpCom.ERROR_CODE.SUCCESS) {
                Observable.create(new ObservableOnSubscribe<Object>() {
                    @Override
                    public void subscribe(ObservableEmitter<Object> e) throws Exception {
                        Toast.makeText(mActivity, GpCom.getErrorText(r), Toast.LENGTH_SHORT).show();
                    }
                }).subscribeOn(AndroidSchedulers.mainThread()).subscribe();
            }
        } catch (RemoteException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @OnClick(R.id.action_right_tv)
    public void onClick(View view) {
        getReceivedOrders();
    }


    @Override
    public void onDestroyView() {
        super.onDestroyView();
        unbinder.unbind();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (bluetoothService.isDiscovering()) {
            bluetoothService.cancelDevices();
        }
        bluetoothService.unregisterReceiver();
        mActivity.unregisterReceiver(mBroadcastReceiver);

        if (!((MyBaseActivity)mActivity).isHoneywell()) {
            try {
                InnerPrinterManager.getInstance().unBindService(mActivity, innerPrinterCallback);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        } else {
            if (conn != null) {
                mActivity.unbindService(conn);
            }
        }
    }
}
